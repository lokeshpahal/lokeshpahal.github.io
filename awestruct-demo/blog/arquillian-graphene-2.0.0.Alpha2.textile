---
date: 2012-09-17
---

_Graphene 2_ is building on top of the Selenium WebDriver API and provide extensions for writing *reusable*, *robust* and *AJAX-enabled* tests with improved *readability*.

_Graphene 2_ uses the ideas from _Graphene 1_ (based on _Selenium 1 API_) and applies it to the world of "Selenium WebDriver":http://seleniumhq.org/projects/webdriver/.

You can read more about the difference between Graphene 1 and Graphene 2 in the "Reference Documentation":https://docs.jboss.org/author/pages/viewpage.action?pageId=53118297

h3. Features

h4. Page Abstractions

"Page abstractions":https://docs.jboss.org/author/display/ARQGRA2/Page+Abstractions allow you to abstract page functionality using the well-known Selenium design pattern "_Page Objects_":http://code.google.com/p/selenium/wiki/PageObjects. In Graphene you can inject page objects directly into the test case using the @@Page@ annotation.

But we take the _Page Objects_ pattern one step further with the concept of "_Page Fragments_":https://docs.jboss.org/author/display/ARQGRA2/Page+Fragments . _Page Fragments_ are reusable parts within a page encapsulated into an object similar to _Page Objects_. A good example of _Page Fragments_ are JavaScript widgets or forms.

The concept of _Page Fragments_ comes from an idea that those components share a same underlying DOM structure, the only difference between all occurences of a component is a location in a DOM tree where a component is rendered - this is denoted by the @@Root@ annotation. You can define this root location for each concrete occurence using a @@FindBy(locator)@ annotation.

h4. Fluent-API for Waiting Conditions

Graphene provides a set of widely used "conditions to avoid writing them repeatedly":https://docs.jboss.org/author/display/ARQGRA2/Graphene+Utility+Class.

h4. Request Guards

"Request guards":https://docs.jboss.org/author/display/ARQGRA2/Request+Guards block the Selenium test execution until a network communication caused by a given action ends. Guards support blocking on _HTTP_ and _XHR (AJAX)_ but can also be used to verify that no such requests were done.

h4. Under the Hood

There are some low level features exposed as API that are used by Graphene internally. While not used regularly within a normal test, can be handy to write more robust tests:

h5. "JavaScript Interface":https://docs.jboss.org/author/display/ARQGRA2/JavaScript+Interface

This allows you to write a Java interface which automatically translates Java API invocations to JavaScript calls:

bc(prettify).. @JavaScript
public interface Document {
    String getTitle();
}

h5. Page Extensions

"Page Extensions":https://docs.jboss.org/author/display/ARQGRA2/Page+Extensions allow you to inject arbitrary JavaScript code in the page under the test. The javascript code might help you to test complex situations as well as bring completely new features for improving testing. Graphene internally uses _Page Extensions_ for _Request Guards_.

h5. "Graphene Context":https://docs.jboss.org/author/display/ARQGRA2/Graphene+Context+and+Proxy

Graphene allows you to obtain current thread-local context of a browser session and inject it exactly where you need. No more need for driver reference propagation.

h4. Documentation

Last but definitely not the least addition is "the great documentation":https://docs.jboss.org/author/display/ARQGRA2/Home for all of the features above including answers for general questions like "_how Selenium 1, Graphene 1, Selenium WebDriver and Graphene 2 relates to each other_":https://docs.jboss.org/author/pages/viewpage.action?pageId=53118297, what's the "_relation between Graphene's, Drone and Arquillian_":https://docs.jboss.org/author/display/ARQGRA2/Using+Drone.

h3. "Getting Started":https://docs.jboss.org/author/display/ARQGRA2/Getting+Started

It's the same as with any other Arquillian extension: open the IDE, setup the "Maven dependency":https://docs.jboss.org/author/display/ARQGRA2/Framework+Integration+Options and you are ready to "start testing":https://docs.jboss.org/author/display/ARQGRA2/Getting+Started!

h3. Whatâ€™s next?

In the upcoming releases, we would like to focus on more new features as well as migrate some features from Graphene 1 to Graphene 2:

* Forge plugin for quick start
* command interceptors
* parallel browser session control
* jQuery/Sizzle locators
* AJAX/HTTP Communication Halter
* page abstraction improvements
* closer integration with the Arquillian event system
* helpers for writing browser specific code

h3. Call to Action

"Let us know what you think":https://community.jboss.org/en/arquillian and "help us shape Graphene":https://issues.jboss.org/browse/ARQGRA to be what you want it to be.
