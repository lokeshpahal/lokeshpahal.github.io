---
author: lordofthejars
---

h3(highlights). What's included in the Alpha3 release?

- <i class="icon-star"></i> New Containerless DeployableContainer := 

When weâ€™ve previously been talking about Containers we have been referring to Containers where the application is deployed inside a container. For example in the case of a Tomcat application, resources are deployed inside a Servlet container or in case of Apache TomEE you can deploy EJBs inside an EJB container.

But nowadays there are applications that contains the container (if they have one) embedded inside them. Typically these applications uses an embedded server and they are run directly from the commandline. Some examples can be Spring Boot, Netty, SparkJava or Undertow.

Arquillian Cube now has a ContainerLess DeployableContainer that combined with Docker can 'deploy' any application. This is not restricted to only Java applications, but can just as well be a Node or Ruby on Rails app.
For more information and examples see "the documentation":https://github.com/arquillian/arquillian-cube/blob/1.0.0.Alpha3/README.adoc#containerless-server-and-docker

=:

- <i class="icon-star"></i> Infer @exposedPorts@ from @portBindings@ := 

To simplify the configuration, Arquillian Cube will now auto export all ports
defined in the @portBindings@ option. No need to specify them twice. In the case where
you want to remap the ports or only expose some of them, you can still define that
using the @exposedPorts@ option.

For more information see "the documentation":https://github.com/arquillian/arquillian-cube/blob/1.0.0.Alpha3/README.adoc#inferring-exposedports-from-portbinding

=:

- <i class="icon-star"></i> Allow connecting to a running container := 

With the configuration option @shouldAllowToConnectToRunningContainers@ you can bypass
the Create/Start Cube commands if the a Docker Container with the same name is already
running on the target system. If so, Cube will reuse that Container moving forward. 

This allow you to prestart the containers manually during development and just
connect to them to avoid the extra cost of starting the Docker Containers for each test
run. This assumes you are not changing the actual definition of the Docker Container itself.
=:
