---
date: 2013-01-15
author: lfryc
---

h3. Highlighted Features

- <i class="icon-star"></i> jQuery Selectors :=
Graphene gets its own @@FindBy@ annotation and @ByJQuery@ selector in order to fully support _jQuery_ selectors. ("read more":#jquery-selectors) =:

- <i class="icon-star"></i> Injecting Selenium Resources := 
The interesting Selenium APIs (HTML5, Mobile, etc.) can be injected to the test or page fragments directly. ("read more":#injecting-selenium-resources) =:

- <i class="icon-star"></i> Fluent API for Waiting := 
Waiting conditions can now be defined in a nice fluent API. ("read more":#waiting-fluent-api)  =:

- <i class="icon-star"></i> Injecting List of Page Fragments :=
It's possible to inject a list of page fragments with @@FindBy List<PageFragment>@. =:

- <i class="icon-star"></i> Page Fragment Enrichment := 
Any Arquillian resource available through @@ArquillianResource@ can be injected into page fragments. =:

h3. Important Bug Fixes

- <i class="icon-star"></i> XHR Request Guards := 
@guardXhr@ wasn't waiting for the XHR request to fully complete. So we have improved it and now it not only waits for AJAX callback to completely finish, but it will wait for any asynchronous processing caused by that callback to finish. =:

- <i class="icon-star"></i> Protecting against Stale Elements</tt> :=  
You are now completely protected against @StaleElementReferenceException@ when using page fragments and elements injected by @@FindBy@, because operations on those elements are evaluated lazily (at the time of usage) and they are re-evaluated when they get stale. =:

- <i class="icon-star"></i> Refined Page Fragments :=
Page Fragments have received a lot of bug fixes and improvements. =:

h3(#jquery-selectors). jQuery Selectors

This feature injects a <tt>"jQuery":http://jquery.com/</tt> script to a tested page and allows Graphene to find elements using the "jQuery Selectors syntax":http://api.jquery.com/category/selectors/?rdfrom=http%3A%2F%2Fdocs.jquery.com%2Fmw%2Findex.php%3Ftitle%3DSelectors%26redirect%3Dno:

bc(prettify).. @FindBy(jquery = ":button:visible")
WebElement firstVisibleButton;

p(info). %Note that Graphene injects jQuery in "non-conflict way":http://api.jquery.com/jQuery.noConflict/, so it does not affect your tested application.%

h3(#injecting-selenium-resources). Injecting Selenium Resources

Graphene leverages a long list of advanced Selenium features and their APIs to take full control of your browser:

* *HTML5*
** "@WebStorage@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/WebStorage.html
** "@DatabaseStorage@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/DatabaseStorage.html
** "@ApplicationCache@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/ApplicationCache.html
* *Mobile-specific*
** "@TouchScreen@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/TouchScreen.html
** "@Rotatable@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Rotatable.html
** "@BrowserConnection@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/BrowserConnection.html
** "@LocationContext@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/LocationContext.html
* *Advanced Browser Control*
** "@Actions@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/interactions/Actions.html
** "@Keyboard@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Keyboard.html
** "@Mouse@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Mouse.html
** "@JavascriptExecutor@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/JavascriptExecutor.html
** "@TakesScreenshot@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/TakesScreenshot.html
** "@Capabilities@":http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Capabilities.html

You can inject those using @@ArquillianResource@ annotation:

bc(prettify).. @ArquillianResource
BrowserConnection connection;

@Test
public void test() {
    connection.setOnline(false);
}

h3(#waiting-fluent-api). Fluent API for Waiting

The Alpha2 API allowed you to define a wait like this:

bc(prettify).. waitAjax().until(element(button).isVisible());

p. In order to fully support code-completion, we have decided to deprecate this API in favor of a fluent API:

bc(prettify).. waitAjax().until().element(button).is().visible();

h3. Roadmap

This release is a significant milestone "on the way to Beta1":https://community.jboss.org/message/777443#777443.
