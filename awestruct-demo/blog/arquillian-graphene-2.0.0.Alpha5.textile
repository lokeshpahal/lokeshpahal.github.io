---
date: 2013-09-04
author: jhuska
---

The last step before Beta release brings you a lot of new features.

<br/>

h3(highlights). Highlighted Changes

- <i class="icon-star"></i> Deprecations in this release := 
With the support of the community, we have recognized that some parts of the API needs to be enhanced to achieve better clarity, readability and consistency. The old parts are deprecated in this release, and will be removed in the upcoming Beta1 release. ("list of deprecations here":#deprecations)
=:

- <i class="icon-star"></i> Guard Improvements and Fixes := 
"RequestGuard":https://github.com/arquillian/arquillian-graphene/blob/2.0.0.Alpha5/graphene-webdriver/graphene-webdriver-api/src/main/java/org/jboss/arquillian/graphene/request/RequestGuard.java interface is now exposed as an API and brings new methods for filtering the requests that should be intercepted. This is especially useful in cases where your page does asynchronously communicate with a server (using Comet/Push method) which can make your tests undeterministic - the asynchronously invoked request can interfere with a request invoked synchronously (e.g. by clicking on a button) and Graphene can't guess which request should be observed. With the @RequestGuard@ API you can ignore the request which you're not interested in guarding. ("JavaDoc":https://github.com/arquillian/arquillian-graphene/blob/2.0.0.Alpha5/graphene-webdriver/graphene-webdriver-api/src/main/java/org/jboss/arquillian/graphene/request/RequestGuard.java#L57)
=:

- <i class="icon-star"></i> Support for parallel browser sessions := 
The Graphene context is no longer thread-local which enables parallel browser sessions. In other words; you can control two different browsers in one test. ("an example here":#parallel-browsers)
=:

- <i class="icon-star"></i> Page Objects can encapsulate their location := 
You can easily denote the Page Objects location via the @@Location@ annotation. When used with @@InitialPage@ annotation as a test parameter, Graphene will load that location as a first action for the test, and will also give you the initialized page object. ("an example here":#page-objects-location)
=:

- <i class="icon-star"></i> Injecting elements from HTML frames/iframes := 
To facilitate the tedious process of switching to and from a particular frame/iframe; you can now just use the @@InFrame@ annotation to specify in which frame the element should be located. The details are handled by Graphene. ("an example here":#elements-from-frames)
=:

- <i class="icon-star"></i> Page Fragments can implement the @WebElement@ interface := 
If you want to give your Page Fragments all the capabilities of the @WebElement@ interface, without implementing them youself; you can simply add @implements WebElement@ and make your fragment @abstract@. Graphene will provide you with a proxy that delegates all the @WebElement@ method invocations to your page fragment's @@Root@ element.
=:

- <i class="icon-star"></i> Drone enrichers for Page Fragments and Page Objects := 
It is now possible to inject objects into your Page Fragments and Page Objects via the standard Arquillian enrcihment annotations: e.g. @@Drone@ to get the browser instance, @@ArquillianResource@ to get resources like @URL@, @JavascriptExecutor@, @LocalStorage@ or others.
=:

- <i class="icon-star"></i> Introduction of the @GrapheneElement@ := 
@GrapheneElement@ is our way of providing you with the missing methods of the @WebElement@ interface. @GrapheneElement@ can be used anywhere the @WebElement@ is used. Currently the only addition is the @isPresent@ method, but we plan to add far more in the upcoming releases.
=:

- <i class="icon-star"></i> Introduction of the @@FindByJQuery@ annotation:= 
This is the replacement for the deprecated @@FindBy@ annotation. Read more about it in the "deprecations section":#deprecations.
=:

- <i class="icon-star"></i> Drone upgraded to 1.2.0.Beta1 := 
For more info, please see the Drone release annoucement "here.":/blog/2013/09/04/arquillian-extension-drone-1-2-0-Beta1/
=:

h4. Removed

- <i class="icon-star"></i> @Graphene.guardXhr()@ := 
@Graphene.guardXhr()@ was replaced by @Graphene.guardAjax()@.
=:

h4(#deprecations). Deprecations (will be removed in Beta1)

- <i class="icon-star"></i> Our implementation of the @@FindBy@ annotation := 
To achieve better extendability and to avoid errors caused by mistyped package name, we decided to deprecate our implementation of the @@FindBy@ annotation ("read more":https://community.jboss.org/thread/232112). Its purpose was solely to add support for JQuery locating strategy. This is now replaced by the @@FindByJQuery@ annotation. The main advantage of the new approach is its extensibility. Support for our own location strategies are guaranteed via "LocationStrategy":https://github.com/arquillian/arquillian-graphene/blob/2.0.0.Alpha5/graphene-webdriver/graphene-webdriver-spi/src/main/java/org/jboss/arquillian/graphene/spi/findby/LocationStrategy.java interface.
=:

- <i class="icon-star"></i> Package name changes for @@Page@ and @@Root@ annotations := 
* @org.jboss.arquillian.graphene.spi.annotations.Root@ replaced by @org.jboss.arquillian.graphene.fragment.Root@
* @org.jboss.arquillian.graphene.spi.annotations.Page@ replaced by @org.jboss.arquillian.graphene.fragment.Page@
=:

- <i class="icon-star"></i> Selenium 1 support := 
Selenium 1 support will be removed in the upcoming Beta1 release, but you can still use Graphene 1, which is built on top of Selenium 1. ("Graphene 1 docs":https://docs.jboss.org/author/display/ARQGRA/Home)
=:

h3(#parallel-browsers). Parallel browser sessions

p. Your test can now use more than one browser session. It might be handy for testing e.g. server push functionality. Consider the following scenario:

bc(prettify).. @Browser1 
@Drone
private WebDriver browser1;

@Browser2
@Drone
private WebDriver browser2;

public void testServerPushFromFirefoxToChromeAfterRegistration() {
    browser1.get(“http://localhost:8080/myApp”);
    browser2.get(“http://localhost:8080/myApp”);

    formFragment.registerUser(new User(“John”), browser1);
    registeredUsers.assertContains(“John”, browser2);
}

p. The @@Browser1@ and @@Browser2@ annotations are qualifiers, similar concept as in CDI. The settings for these browsers can be set e.g. in the @arquillian.xml@:

bc(prettify).. <extension qualifier="webdriver-browser1">
  <property name="browserCapabilities">firefox</property>
</extension>
<extension qualifier="webdriver-browser2">
  <property name="browserCapabilities">chrome</property>
</extension>

h3(#page-objects-location). Page Objects location encapsulated

p. First thing you have to keep in mind before interacting with the page is that its loading in the browser. Once the URL of the particular page changes, you will have to change it on several places in your tests.

p. Graphene, therefore, encapsulates the page’s location, and provide you with a way to load the page automatically on a correct context root, before the test execution.

p. Consider following snippet:

bc(prettify).. @Location("register-page.html")
public class RegisterPage {
    //implementation of the page object goes here
}

@Test
public void testRegisterPage(@InitialPage RegisterPage page) {
   //Graphene automatically load MyPageObject location in the browser
   page.getInput().sendKeys(“Blah foo”);
   page.submit();
   assertFalse(page.isSubmitted());
}

p. You can also leverage @Graphene.goTo(RegisterPage.class)@ method, which will use the @@Location@ annotation value to load the correct page in the browser.

h3(#elements-from-frames). Elements from frames/iframes

p. If you find working with frames/iframes tedious using the @WebDriver@ API, we have some good news for you. Graphene is now able to specify in which frame/iframe an element reside. Consider the following snippet:

bc(prettify).. @Page
@InFrame(index = 0)
private PageObject page;

@FindBy(id = "foo-bar")
@InFrame(nameOrId = "second")
private PageFragment myFragment;

p. You can specify the frame either by its index or its @nameOrId@ strategy. Graphene will automatically switche to the coresponding frame when interacting with the page object and switches back after the interaction.

h4. Roadmap

p. We have introduced all the features for the upcoming Graphene 2.0 release.

p. The Beta1 release will be pushed in a few days which will bring you some more goodies:

* Arquillian guide
* finished reference documentation
* online JavaDoc documentation for Graphene API
* removal of deprecated APIs
* stabilization
* usual portion of bug fixes

p. Be sure to remove deprecated APIs in order to stay compatible with upcoming Graphene 2.0 releases.
