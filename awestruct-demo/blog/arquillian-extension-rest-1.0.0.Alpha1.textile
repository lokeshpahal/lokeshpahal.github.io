---
date: 2013-10-28
---

This is the first release of the Arquillian REST extension.

At the moment it consist of two complementary parts:

- <i class="icon-star"></i> REST client :=
Simplifies writing the client side of testing REST services =:

- <i class="icon-star"></i> Warp REST extension :=
An extension, that with a bit of magic allows you to intercept the state of the Service prior or after to it's execution =:

h3. REST client

p. Sometimes you need to test your REST app as a black box. You know the interface (the contract), you have some input and know what results you expect. For this purpose Arquillian REST Client Extension is your friend. It makes your code shorter by injecting configured artifacts. The extension is based on the RestEasy client library. Both RestEasy 2.x and 3.x are supported. You only need to add the proper dependency to your classpath.

bc(prettify).. @RunWith(Arquillian.class)
public class RestClientTestCase {

  @ArquillianResource
  private URL deploymentURL;

  @Deployment(testable = false)
  public static WebArchive create()
  {
      return ShrinkWrap.create(WebArchive.class)
          .addPackage(Customer.class.getPackage())
          .addClasses(CustomerResource.class, CustomerResourceImpl.class, JaxRsActivator.class);
  }

  /**
   * Arquillian calculates resource path by using deployment URL+ArquillianResteasyResource.value
   * which is by default "rest". If your API is located under different root i.e.
   * "api_v2" then use @ArquillianResteasyResource("api_v2")
   *
   * @param customerResource configured resource ready for use, injected by Arquillian
   */
  @Test
  public void getCustomerById(@ArquillianResteasyResource CustomerResource customerResource)
  {
      // Given
      final String name = "Acme Corporation";
      final long customerId = 1L;

      // When
      final Customer result = customerResource.getCustomerById(customerId);

      // Then
      assertNotNull(result);
      assertNotNull(result.getId());
      assertEquals(name, result.getName());
  }
}

p. For more examples on how to use these extensions and quickly get started with development you can take a look at the "integration tests":https://github.com/arquillian/arquillian-extension-rest/tree/master/rest-client/ftest that are part of project source code.

h3. Warp REST

p. "Arquillian Warp":/modules/warp-extension/ makes it possible to perform a gray-box testing of any servlet based in-container application. Now we are introducing an API that allows you to intercept the state of the REST services and validate the generated response including, but not limiting to the security context, response HTTP status code, HTTP headers and the response entities. The actual HTTP servlet request and responses are also being recorded, allowing you to verify them directly on the server. All of this happens in the application container, before the response is returned to the invoking client!

p. The WARP extension targets JAX-RS major versions and already has support for JAX-RS 1.1 and 2.0.

p. The JAX-RS 1.1 specification did not define any support for request interception, while this has been widely supported through implementation specific hooks, that is why in order to use the extension with JAX-RS 1.1 one of JAX-RS provider specific implementation need to be chosen. Fortunately we already support most the popular providers:

* RESTEasy
* Jersey
* CXF

Now, let's write some code:

div(filename). StockServiceResourceTestCase.java

bc(prettify).. @Test
@RunAsClient
public void testStockGetWarp() {

  Warp.initiate(new Activity() {
      @Override
      public void perform() {

          // invokes the service
          stockService.getStock(1L);
      }
  }).inspect(new Inspection() {

      private static final long serialVersionUID = 1L;

      @ArquillianResource
      private RestContext restContext;

      @AfterServlet
      public void testGetStock() {

          // validates the service response
          assertEquals(HttpMethod.GET, restContext.getHttpRequest().getMethod());
          assertEquals(200, restContext.getHttpResponse().getStatusCode());
          assertEquals("application/json", restContext.getHttpResponse().getContentType());
          assertNotNull(restContext.getHttpResponse().getEntity());
      }
  });
}

p. For more examples on how to use these extensions and quickly get started with development you can take a look at the "integration tests":https://github.com/arquillian/arquillian-extension-rest/tree/master/warp-rest/ftest that are part of the projects source code.

p. We look forward to hearing your feedback about this release in the "community forums":#{site.project_space}!
