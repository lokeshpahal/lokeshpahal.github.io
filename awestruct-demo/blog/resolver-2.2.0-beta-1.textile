---
date: 2014-09-30
author: kpiwko
---

The ShrinkWrap Resolver 2.2.0-beta-1 release brings you better support for Gradle, JDK 8 usability improvemens, plenty of bugfixes and feature requests you've asked for. It is a major step towards 2.2.0 stable release.

h3. Significant additions in ShrinkWrap Resolver 2.2.0-beta-1

- <i class="icon-star"></i> Gradle importer :=

Gradle importer was already included in the alpha releases, but it is time to promote it. Gradle Importer expose functions similar to Maven Importer but instead for Gradle using the Gradle Tooling API. It includes support for multi-module projects. Kudos to Michał Matłoka for the Gradle support.

bc(prettify).. 

ShrinkWrap.create(EmbeddedGradleImporter.class)
  .forThisProjectDirectory().importBuildOutput().as(WebArchive.class);

ShrinkWrap.create(EmbeddedGradleImporter.class)
  .forProjectDirectory("/path/to/dir").importBuildOutput("/path/to/result/war").as(WebArchive.class);

ShrinkWrap.create(EmbeddedGradleImporter.class)
  .forProjectDirectory("/path/to/dir").forTasks("task1","task2").withArguments("arg1","arg2")
  .importBuildOutput().as(WebArchive.class);

p. =:


- <i class="icon-star"></i> List resolution :=

Finally, you can resolve artifacts as lists, not only arrays. This is handy especially with JDK8 features. Kudos to John Ament for providing this enhancement.

bc(prettify).. Maven.resolver().
    .resolve("G:A:V").withTransitivity().asList(File.class);

p. =:

- <i class="icon-star"></i> MavenCoordinates as output :=

In some cases, you might be interested in just the Maven coordinates, so you can for instance compare two dependency sets. ShrinkWrap Resolver now allows you to to do that easier then before.

bc(prettify).. Maven.resolver().
    .resolve("G:A:V).withTransitivity().as(MavenCoordinate.class);

p. You can obviously return coordinates as @List@ =:

- <i class="icon-star"></i> MavenImporter and IDEs are now friends :=

@MavenImporter@, a tool that is able to compile and package project from a _pom.xml_ file, is now able to fork compiler process if you are not running on JDK but JRE. This change makes it even easier to run the tests from IDE. =:

h3. Deprecation warning

Few configuration methods were deprecated since 2.0.0. If you are configuring resolution sources (repositories, class path resolution), offline mode and you are not using @Maven.configureResolver()@ to get configuration API, you should update your tests. Deprecated methods *will be dropped* with the next release of 2.2.x stream.

We hope that you'll enjoy our new stuff and look forward to hear your feedback in the "community forums":#{site.project_space}.
