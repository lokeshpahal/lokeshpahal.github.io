---
date: 2013-02-26
author: csadilek
---

This is the first release of the Arquillian GWT extension which aims to bring true integration testing to GWT. 

h3. Highlighted Features

- <i class="icon-star"></i> Run GWT integration tests in Arquillian containers :=

This means that GWT integration tests can break free and execute in the actual runtime container instead of being tied to GWTâ€™s embedded Jetty server. =:

- <i class="icon-star"></i> Combining client-side and in-container tests :=

It is possible to combine GWT client-side and standard in-container tests in the same test class. This allows to test features without having to worry about the client-server bridge and should pave the way for future support of Arquillian Warp and Drone in GWT integration tests. =:

h3. Getting Started

To start using the Arquillian GWT extension just add the following dependency to your project:

div(filename). pom.xml

bc(prettify).. <dependency>
    <groupId>org.jboss.arquillian.extension</groupId>
    <artifactId>arquillian-gwt</artifactId>
    <version>1.0.0.Alpha1</version>
</dependency>

h3. Writing Arquillian GWT tests

To run a test method as a GWT integration test either annotate the test class or test method with @@RunAsGwtClient@ and specifiy the GWT module. If you annotate the test class all test methods in that class will run as GWT integration tests.

div(filename). MyTestClass.java

bc(prettify).. 
@RunWith(Arquillian.class)
public class MyTestClass {

  @Test 
  @RunAsGwtClient(moduleName = "org.myapp.MyGwtModule")
  public void myGwtTest() {

  }
}

p. To help packaging your app for the test deployment Arquillian GWT provides a simple utility called @GwtArchive@. The next version of Arquillian GWT will automatically enhance the used @WebArchive@. So, you won't need to use this utility in the future. Here's a complete example:

div(filename). GreeterRpcTest.java

bc(prettify).. 
@RunWith(Arquillian.class)
public class GreeterRpcTest extends ArquillianGwtTestCase {

  @Deployment
  public static WebArchive createDeployment() {
    return GwtArchive.get()
      .addClass(Greeter.class)
      .addClass(GreetingService.class)
      .addClass(GreetingServiceImpl.class);
  }

  @Test
  @RunAsGwtClient(moduleName = "org.myapp.MyGwtModule")
  public void testGreetingService() {
    GreetingServiceAsync greetingService = GWT.create(GreetingService.class);
    greetingService.greetServer("Hello!", new AsyncCallback<String>() {
      @Override
      public void onFailure(Throwable caught) {
        Assert.fail("Request failure: " + caught.getMessage());
      }

      @Override
      public void onSuccess(String result) {
        assertEquals("Received invalid response from Server", "Welcome!", result);
        finishTest();
      }
    });
    delayTestFinish(5000);
  }
}

p. Note that you will only need to extend @ArquillianGwtTestCase@ if you want to inherit GWT's asynchronous testing methods (@finishTest@ and @delayTestFinish@).

We look forward to your feedback on this release in the "community forums":#{site.project_space}!
